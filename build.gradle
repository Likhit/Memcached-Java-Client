/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.10.2/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

dependencies {
    // These dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation files('lib/log4j.jar')
    implementation project('RejigInterface')

    extraLibs files('lib/log4j.jar')

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

jar {
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Run tests as tasks
task memcachedBench(type: JavaExec) {
    main = 'edu.usc.cs550.rejig.client.test.MemcachedBench'
    classpath = sourceSets.test.runtimeClasspath
    // Pass arguments using -PcmdArgs=x
    if (project.hasProperty('cmdArgs')) {
        args(cmdArgs.split(','))
    } else {
        args(['100000', '0'])
    }
}

task memcachedTest(type: JavaExec) {
    main = 'edu.usc.cs550.rejig.client.test.MemcachedTest'
    classpath = sourceSets.test.runtimeClasspath
    // Pass arguments using -PcmdArgs=x
    if (project.hasProperty('cmdArgs')) {
        args(cmdArgs.split(','))
    } else {
        args(['10', '100000', '10'])
    }
}

task testMemcached(type: JavaExec) {
    main = 'edu.usc.cs550.rejig.client.test.TestMemcached'
    classpath = sourceSets.test.runtimeClasspath
}

task unitTests(type: JavaExec) {
    main = 'edu.usc.cs550.rejig.client.test.UnitTests'
    classpath = sourceSets.test.runtimeClasspath
}
